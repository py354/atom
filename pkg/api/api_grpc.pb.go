// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fleet_RegisterCar_FullMethodName      = "/api.Fleet/RegisterCar"
	Fleet_GetCar_FullMethodName           = "/api.Fleet/GetCar"
	Fleet_GetAllCars_FullMethodName       = "/api.Fleet/GetAllCars"
	Fleet_AddMileage_FullMethodName       = "/api.Fleet/AddMileage"
	Fleet_DeleteCar_FullMethodName        = "/api.Fleet/DeleteCar"
	Fleet_GetEstimatedCost_FullMethodName = "/api.Fleet/GetEstimatedCost"
)

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetClient interface {
	RegisterCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Empty, error)
	GetCar(ctx context.Context, in *RP, opts ...grpc.CallOption) (*Car, error)
	GetAllCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarList, error)
	AddMileage(ctx context.Context, in *AddMileageRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteCar(ctx context.Context, in *RP, opts ...grpc.CallOption) (*Empty, error)
	GetEstimatedCost(ctx context.Context, in *RP, opts ...grpc.CallOption) (*EstimatedCostResp, error)
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) RegisterCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Fleet_RegisterCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetCar(ctx context.Context, in *RP, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, Fleet_GetCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetAllCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarList, error) {
	out := new(CarList)
	err := c.cc.Invoke(ctx, Fleet_GetAllCars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) AddMileage(ctx context.Context, in *AddMileageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Fleet_AddMileage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteCar(ctx context.Context, in *RP, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Fleet_DeleteCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetEstimatedCost(ctx context.Context, in *RP, opts ...grpc.CallOption) (*EstimatedCostResp, error) {
	out := new(EstimatedCostResp)
	err := c.cc.Invoke(ctx, Fleet_GetEstimatedCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
// All implementations must embed UnimplementedFleetServer
// for forward compatibility
type FleetServer interface {
	RegisterCar(context.Context, *Car) (*Empty, error)
	GetCar(context.Context, *RP) (*Car, error)
	GetAllCars(context.Context, *Empty) (*CarList, error)
	AddMileage(context.Context, *AddMileageRequest) (*Empty, error)
	DeleteCar(context.Context, *RP) (*Empty, error)
	GetEstimatedCost(context.Context, *RP) (*EstimatedCostResp, error)
	mustEmbedUnimplementedFleetServer()
}

// UnimplementedFleetServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (UnimplementedFleetServer) RegisterCar(context.Context, *Car) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCar not implemented")
}
func (UnimplementedFleetServer) GetCar(context.Context, *RP) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedFleetServer) GetAllCars(context.Context, *Empty) (*CarList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCars not implemented")
}
func (UnimplementedFleetServer) AddMileage(context.Context, *AddMileageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMileage not implemented")
}
func (UnimplementedFleetServer) DeleteCar(context.Context, *RP) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedFleetServer) GetEstimatedCost(context.Context, *RP) (*EstimatedCostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimatedCost not implemented")
}
func (UnimplementedFleetServer) mustEmbedUnimplementedFleetServer() {}

// UnsafeFleetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServer will
// result in compilation errors.
type UnsafeFleetServer interface {
	mustEmbedUnimplementedFleetServer()
}

func RegisterFleetServer(s grpc.ServiceRegistrar, srv FleetServer) {
	s.RegisterService(&Fleet_ServiceDesc, srv)
}

func _Fleet_RegisterCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RegisterCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_RegisterCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RegisterCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_GetCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetCar(ctx, req.(*RP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetAllCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetAllCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_GetAllCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetAllCars(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_AddMileage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMileageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).AddMileage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_AddMileage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).AddMileage(ctx, req.(*AddMileageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteCar(ctx, req.(*RP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetEstimatedCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetEstimatedCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fleet_GetEstimatedCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetEstimatedCost(ctx, req.(*RP))
	}
	return interceptor(ctx, in, info, handler)
}

// Fleet_ServiceDesc is the grpc.ServiceDesc for Fleet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fleet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCar",
			Handler:    _Fleet_RegisterCar_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _Fleet_GetCar_Handler,
		},
		{
			MethodName: "GetAllCars",
			Handler:    _Fleet_GetAllCars_Handler,
		},
		{
			MethodName: "AddMileage",
			Handler:    _Fleet_AddMileage_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Fleet_DeleteCar_Handler,
		},
		{
			MethodName: "GetEstimatedCost",
			Handler:    _Fleet_GetEstimatedCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
